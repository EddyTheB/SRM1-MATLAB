classdef SettingsDialogue < handle
    % SettingsDialogue
    %   A GUI that aks users to specify a wide range of parameters for an 
    %   SRM1Model, such as background concentrations, wind speed, emission
    %   factors, and other parameters.
    %
    %   Designed to be raised by SRM1Display.
    %
    % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % $Workfile:   SettingsDialogue.m  $
    % $Revision:   1.0  $
    % $Author:   edward.barratt  $
    % $Date:   Nov 24 2016 11:06:36  $
    % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    properties
        Figure
        DisplayObject@SRM1Display = SRM1Display.empty
    end % properties
    
    properties (Dependent)
        Pollutants
        
        Pollutant
        PollutantI
        Emission
        EmissionI
        ColorModeI
        NumPollutants
        CalcDistMeasuredFromText
    end % properties (Dependent)
    
    properties (Dependent, Hidden)
        RoadModeValue
        EmissionFactors
    end % properties (Dependent, Hidden)
    
    properties (Hidden)
        AllPanel
        ChemPanels
        RoadConcPanel
        ControlsPanel
        VisPanel
        FigPosition = [100, 100, 490, 590]
        ColorModes = {'Simple Line', 'Road Class', 'Speed Class', ...
                      'Stagnation Factor', 'Total Traffic', 'Emissions Total', 'Concentration at ---'}
        ColorModesB = {'SimpleLine', 'RoadClass', 'SpeedClass', 'Stagnation', 'Traffic', 'Emissions', 'Concentration'}
        EmissionAttributionWindow
        EmissionAttributionWindowPosition = [100, 100, 100, 100]
    end
    
    methods
        %% Constructor
        function app = SettingsDialogue(varargin)
            Options.DisplayObject = 'NotSet';
            Options.Position = -999;
            Options = checkArguments(Options, varargin);
            if ~isequal(Options.DisplayObject, 'NotSet')
                app.DisplayObject = Options.DisplayObject;
            end
            if ismember(numel(Options.Position), [2, 4])
                app.FigPosition(1) = Options.Position(1);
                app.FigPosition(2) = Options.Position(2);
            else
                error('Position should be a 2 value vector.')
            end
            
            app.Figure = figure('ToolBar', 'none',  ...
                'MenuBar', 'none', ...
                'Name', 'SRM1 Settings', ...
                'NumberTitle', 'off', ...
                'Units', 'Pixels', ...
                'Position', app.FigPosition, ...
                'Visible', 'off', ...
                'CloseRequestFcn', @app.CloseFunction);
            
            app.AllPanel = uipanel('Parent', app.Figure, ...
                    'Units', 'pixels', ...
                    'Position', [10, 10, 470, 570]);
            StartY = 635;
            
            % Model Controls
            StartY = StartY - 150;
            app.ControlsPanel.Panel = uipanel('Parent', app.AllPanel, ...
                    'Units', 'pixels', ...
                    'Title', 'Model Controls', ...
                    'Position', [10, StartY, 450, 70]);
            uicontrol('Style', 'text', ...
                'Parent', app.ControlsPanel.Panel, ...
                'String', 'Current Pollutant', ...
                'HorizontalAlignment', 'right', ...
                'BackgroundColor', [1, 1, 1], ...
                'Position', [10, 35, 110, 15]);
            app.ControlsPanel.PollutantDropDown = uicontrol('Style', 'popupmenu', ...
                'Parent', app.ControlsPanel.Panel, ...
                'String', app.Pollutants, ...
                'Position', [130, 35, 110, 20], ...
                'Callback', @app.ChangeValues);
            uicontrol('Style', 'text', ...
                'Parent', app.ControlsPanel.Panel, ...
                'String', 'Average Wind Speed', ...
                'HorizontalAlignment', 'right', ...
                'BackgroundColor', [1, 1, 1], ...
                'Position', [10, 10, 110, 15]);
            app.ControlsPanel.WindSpeedSlider = uicontrol('Style', 'slider', ...
                'Parent', app.ControlsPanel.Panel, ...
                'Min', 0, ...
                'Max', 20, ...
                'Value', 10, ...
                'SliderStep', [1/40, 1/10], ...
                'BackgroundColor', [1, 1, 1], ...
                'Position', [130, 10, 60, 15], ...
                'Callback', @app.ChangeValues);
            app.ControlsPanel.WindSpeedNumber = uicontrol('Style', 'edit', ...
                'Parent', app.ControlsPanel.Panel, ...
                'String', '---', ...
                'BackgroundColor', [1, 1, 1], ...
                'Position', [200, 10, 40, 15], ...
                'Callback', @app.ChangeValues);
            uicontrol('Style', 'text', ...
                'Parent', app.ControlsPanel.Panel, ...
                'String', 'Emission Factors', ...
                'HorizontalAlignment', 'right', ...
                'BackgroundColor', [1, 1, 1], ...
                'Position', [260, 35, 100, 15]);
            app.ControlsPanel.EmissionDropDown = uicontrol('Style', 'popupmenu', ...
                'Parent', app.ControlsPanel.Panel, ...
                'String', app.EmissionFactors, ...
                'Position', [370, 35, 70, 20], ...
                'Callback', @app.ChangeValues);
            app.ControlsPanel.EmissionButton = uicontrol('Style', 'pushbutton', ...
                'Parent', app.ControlsPanel.Panel, ...
                'String', 'Emission Factor Attribution', ...
                'Position', [260, 10, 180, 20], ...
                'Callback', @app.RaiseEmissionEdit);
                  
            % View Preferences
            StartY = StartY - 135;
            app.VisPanel.Panel = uipanel('Parent', app.AllPanel, ...
                    'Units', 'pixels', ...
                    'Title', 'Display Options', ...
                    'Position', [10, StartY, 450, 125]);
            uicontrol('Style', 'text', ...
                'Parent', app.VisPanel.Panel, ...
                'String', 'Road Colour', ...
                'HorizontalAlignment', 'right', ...
                'BackgroundColor', [1, 1, 1], ...
                'Position', [10, 85, 110, 15]);
            app.VisPanel.RoadConcentrationDropDown = uicontrol('Style', 'popupmenu', ...
                'Parent', app.VisPanel.Panel, ...
                'String', app.ColorModes, ...
                'Position', [130, 85, 110, 20], ...
                'Callback', @app.ChangeValues);
            uicontrol('Style', 'text', ...
                'Parent', app.VisPanel.Panel, ...
                'String', 'Background Colour', ...
                'HorizontalAlignment', 'right', ...
                'BackgroundColor', [1, 1, 1], ...
                'Position', [10, 60, 110, 15]);
            app.VisPanel.ColorSelect = uicontrol('Style', 'pushbutton', ...
                'Parent', app.VisPanel.Panel, ...
                'String', 'Change', ...
                'Position', [130, 60, 110, 20], ...
                'Callback', @app.ChangeValues);
            uicontrol('Style', 'text', ...
                'Parent', app.VisPanel.Panel, ...
                'String', 'Road Selection Mode', ...
                'HorizontalAlignment', 'right', ...
                'BackgroundColor', [1, 1, 1], ...
                'Position', [10, 35, 110, 15]);
            app.VisPanel.SelectBG = uibuttongroup('Visible', 'off', ...
                               'Parent', app.VisPanel.Panel);
            app.VisPanel.SelectButton1 = uicontrol(app.VisPanel.SelectBG, 'Style', 'radiobutton', ...
                               'String', 'New Selection', ...
                               'Position', [130, 35, 110, 15]);
            app.VisPanel.SelectButton2 = uicontrol(app.VisPanel.SelectBG, 'Style', 'radiobutton', ...
                               'String', 'Add To Selection', ...
                               'Position', [130, 15, 110, 15]);
            set(app.VisPanel.SelectBG, 'BorderType', 'none', 'Visible', 'on', 'SelectionChangeFcn', @app.ChangeValues )
            app.VisPanel.ClearSelect = uicontrol('Style', 'pushbutton', ...
                      'Parent', app.VisPanel.Panel, ...
                      'String', 'Clear Selection', ...
                      'Position', [10, 10, 110, 20], ...
                      'Callback', @app.ChangeValues);
            
            uicontrol('Style', 'text', ...
                'Parent', app.VisPanel.Panel, ...
                'String', 'Display Layers', ...
                'FontWeight', 'bold', ...
                'TooltipString', 'Which layers should be displayed?', ...
                'BackgroundColor', [1, 1, 1], ...
                'Position', [260, 90, 180, 15]);
            uicontrol('Style', 'text', ...
                'Parent', app.VisPanel.Panel, ...
                'String', 'Modelled Points', ...
                'HorizontalAlignment', 'right', ...
                'BackgroundColor', [1, 1, 1], ...
                'Position', [260, 70, 155, 15]);
            app.VisPanel.DisplayModelledCB = uicontrol('Style', 'checkbox', ...
                'Parent', app.VisPanel.Panel, ...
                'Position', [425, 70, 15, 15], ...
                'Callback', @app.ChangeValues);
            uicontrol('Style', 'text', ...
                'Parent', app.VisPanel.Panel, ...
                'String', 'Road Network', ...
                'HorizontalAlignment', 'right', ...
                'BackgroundColor', [1, 1, 1], ...
                'Position', [260, 50, 155, 15]);
            app.VisPanel.DisplayRoadCB = uicontrol('Style', 'checkbox', ...
                'Parent', app.VisPanel.Panel, ...
                'Position', [425, 50, 15, 15], ...
                'Callback', @app.ChangeValues);
            uicontrol('Style', 'text', ...
                'Parent', app.VisPanel.Panel, ...
                'String', 'Background Map', ...
                'HorizontalAlignment', 'right', ...
                'BackgroundColor', [1, 1, 1], ...
                'Position', [260, 30, 155, 15]);
            app.VisPanel.DisplayBackgroundMapCB = uicontrol('Style', 'checkbox', ...
                'Parent', app.VisPanel.Panel, ...
                'Position', [425, 30, 15, 15], ...
                'Callback', @app.ChangeValues);
            uicontrol('Style', 'text', ...
                'Parent', app.VisPanel.Panel, ...
                'String', 'Grid Lines', ...
                'HorizontalAlignment', 'right', ...
                'BackgroundColor', [1, 1, 1], ...
                'Position', [260, 10, 155, 15]);
            app.VisPanel.DisplayGridCB = uicontrol('Style', 'checkbox', ...
                'Parent', app.VisPanel.Panel, ...
                'Position', [425, 10, 15, 15], ...
                'Callback', @app.ChangeValues);
                 

            % Road Concentration Controls
            StartY = StartY - 60;
            app.RoadConcPanel.Panel = uipanel('Parent', app.AllPanel, ...
                    'Title', 'Road Concentration Controls', ...
                    'Units', 'pixels', ...
                    'Position', [10, StartY, 450, 50]);
            uicontrol('Style', 'text', ...
                'Parent', app.RoadConcPanel.Panel, ...
                'String', 'Calculation Distance', ...
                'TooltipString', 'Calculation distance for road concentration colours.', ...
                'BackgroundColor', [1, 1, 1], ...
                'Position', [10, 10, 110, 15]);
             app.RoadConcPanel.Slider = uicontrol('Style', 'slider', ...
                 'Parent', app.RoadConcPanel.Panel, ...
                 'Min', 0, ...
                 'Max', 60, ...
                 'SliderStep', [1/60, 5/60], ...
                 'Position', [130, 10, 70, 15], ...
                 'Callback', @app.ChangeValues);
             app.RoadConcPanel.Number = uicontrol('Style', 'edit', ...
                 'Parent', app.RoadConcPanel.Panel, ...
                 'String', '---', ...
                 'BackgroundColor', [1, 1, 1], ...
                 'Position', [210, 10, 40, 15], ...
                 'Callback', @app.ChangeValues);
             uicontrol('Style', 'text', ...
                'Parent', app.RoadConcPanel.Panel, ...
                'String', 'Measured from', ...
                'BackgroundColor', [1, 1, 1], ...
                'Position', [260, 10, 80, 15]);
             app.RoadConcPanel.Mode = uicontrol('Style', 'popupmenu', ...
                'Parent', app.RoadConcPanel.Panel, ...
                'String', app.CalcDistMeasuredFromText, ...
                'Position', [350, 10, 90, 20], ...
                'Callback', @app.ChangeValues);

            % Background and air quality standards.
            StartY = StartY - 60;
            PP = [app.Pollutants, 'O3'];
            NumP = app.NumPollutants+1;
            for Pi = 1:NumP
                P = PP{Pi};
                Panel = sprintf('%sPanel', P);
                app.ChemPanels.(Panel).Panel = uipanel('Parent', app.AllPanel, ...
                    'Title', P, ...
                    'Units', 'pixels', ...
                    'Position', [10, StartY, 450, 50]);
                uicontrol('Style', 'text', ...
                    'Parent', app.ChemPanels.(Panel).Panel, ...
                    'String', 'Background Concentration', ...
                    'BackgroundColor', [1, 1, 1], ...
                    'Position', [10, 10, 140, 15])
                app.ChemPanels.(Panel).BGEdit = uicontrol('Style', 'edit', ...
                    'Parent', app.ChemPanels.(Panel).Panel, ...
                    'String', '---', ...
                    'BackgroundColor', [1, 1, 1], ...
                    'Position', [160, 10, 60, 15], ...
                    'Callback', @app.ChangeValues);
                if ~isequal(P, 'O3')
                    uicontrol('Style', 'text', ...
                        'Parent', app.ChemPanels.(Panel).Panel, ...
                        'String', 'Air Quality Standard', ...
                        'BackgroundColor', [1, 1, 1], ...
                        'Position', [230, 10, 140, 15])
                    app.ChemPanels.(Panel).AQEdit = uicontrol('Style', 'edit', ...
                        'Parent', app.ChemPanels.(Panel).Panel, ...
                        'String', '---', ...
                        'BackgroundColor', [1, 1, 1], ...
                        'Position', [380, 10, 60, 15], ...
                        'Callback', @app.ChangeValues);
                end
                %app.(Panel).
                StartY = StartY - 50;
            end
            
            app.SetValues
            set(app.Figure, 'Visible', 'on')
        end % function app = SettingsDialogue()
        
        %% Getters
        function val = get.Pollutants(app)
            val = app.DisplayObject.AllowedPollutants;
        end % function val = get.Pollutants(app)
        
        function val = get.Pollutant(app)
            val = app.DisplayObject.Pollutant;
        end % function val = get.Pollutant(app)
        
        function val = get.PollutantI(app)
            [~, val] = ismember(app.Pollutant, app.Pollutants);
        end % function val = get.Pollutant(app)
        
        function val = get.Emission(app)
            val = app.DisplayObject.EmissionFactorClassName;
        end % function val = get.Emission(app)
        
        function val = get.EmissionI(app)
            [~, val] = ismember(app.Emission, app.EmissionFactors);
        end % function val = get.EmissionI(app)
        
        function val = get.ColorModeI(app)
            [~, val] = ismember(app.DisplayObject.RoadColorMode, app.ColorModesB);
        end % function val = get.ColorModeI(app)
        
        function val = get.NumPollutants(app)
            val = numel(app.Pollutants);
        end % function val = get.NumPollutants(app)
        
        function val = get.CalcDistMeasuredFromText(app)
            val = app.DisplayObject.CalculationDistanceModeAllowedValues;
        end % function val = get.CalcDistMeasuredFromTextV(app)
        
        function val = get.RoadModeValue(app)
            [~, val] = ismember(app.DisplayObject.CalculationDistanceMode, app.DisplayObject.CalculationDistanceModeAllowedValues);
        end % function val = get.RoadModeValue(app)
        
        function val = get.EmissionFactors(app)
            val = app.DisplayObject.Model.EmissionFactorCatalogue.FactorNames;
        end % function val = get.EmissionFactors(app)
        
        %% Other Functions
        function SetValues(app)
            PP = ['O3', app.Pollutants];
            NumP = app.NumPollutants+1;
            for Pi = 1:NumP;
                P = PP{Pi};
                PanelStr = sprintf('%sPanel', P);
                BGStr = sprintf('Background%s', P);
                BG = app.DisplayObject.(BGStr);
                set(app.ChemPanels.(PanelStr).BGEdit, 'String', sprintf('%.*f', DecPlaces(BG), BG))
                if ~isequal(P, 'O3')
                    AQ = app.DisplayObject.Limits.(P);
                    set(app.ChemPanels.(PanelStr).AQEdit, 'String', sprintf('%.*f', DecPlaces(AQ), AQ))
                end 
            end
            DistStr = sprintf('%.*f m', DecPlaces(app.DisplayObject.CalculationDistance), app.DisplayObject.CalculationDistance);
            ColorModes_ = app.ColorModes;
            ColorModes_{end} = ['Concentration at ', DistStr];
            set(app.VisPanel.RoadConcentrationDropDown, 'String', ColorModes_, 'Value', app.ColorModeI)
            WindStr = sprintf('%.*f m/s', DecPlaces(app.DisplayObject.AverageWindSpeed), app.DisplayObject.AverageWindSpeed);
            set(app.ControlsPanel.WindSpeedSlider, 'Value', app.DisplayObject.AverageWindSpeed)
            set(app.ControlsPanel.WindSpeedNumber, 'String', WindStr)
            set(app.ControlsPanel.PollutantDropDown, 'Value', app.PollutantI)
            set(app.ControlsPanel.EmissionDropDown, 'Value', app.EmissionI)
            set(app.RoadConcPanel.Slider, 'Value', app.DisplayObject.CalculationDistance)
            set(app.RoadConcPanel.Number, 'String', DistStr);
            set(app.RoadConcPanel.Mode, 'Value', app.RoadModeValue)
            set(app.VisPanel.DisplayModelledCB, 'Value', app.DisplayObject.DisplayModelledPointConcentrations)
            if app.DisplayObject.Model.NumPoints == 0
                set(app.VisPanel.DisplayModelledCB, 'Enable', 'off')
            else
                set(app.VisPanel.DisplayModelledCB, 'Enable', 'on')
            end
            set(app.VisPanel.DisplayRoadCB, 'Value', app.DisplayObject.DisplayRoad)
            set(app.VisPanel.DisplayBackgroundMapCB, 'Value', app.DisplayObject.DisplayBackgroundMap)
            set(app.VisPanel.DisplayGridCB, 'Value', app.DisplayObject.DisplayGrid)
            set(app.VisPanel.ColorSelect, 'BackgroundColor', app.DisplayObject.BackgroundColor)
            switch app.DisplayObject.RoadSelectionMode
                case 'Create'
                    set(app.VisPanel.SelectBG, 'SelectedObject', app.VisPanel.SelectButton1)
                case 'Append'
                    set(app.VisPanel.SelectBG, 'SelectedObject', app.VisPanel.SelectButton2)
            end
        end % function SetValues(app)
            
        function ChangeValues(app, Sender, ~)
            set(app.Figure, 'pointer', 'watch'); pause(0.01)
            switch Sender
                case app.RoadConcPanel.Slider
                    NewValue = get(app.RoadConcPanel.Slider, 'Value');
                    NewValue = round(NewValue*10)/10;
                    app.DisplayObject.CalculationDistance = NewValue;
                case app.RoadConcPanel.Number
                    NewValue = get(Sender, 'String');
                    NewValue = ReadStringValue(NewValue);
                    if isfinite(NewValue)
                        % Round to 2 decimal places.
                        NewValue = round(NewValue*100)/100;
                        app.DisplayObject.CalculationDistance = NewValue;
                    else
                        msgbox(sprintf('Calculation Distance ''%s'' isn''t understood.', get(Sender, 'String')))
                        app.SetValues
                    end
                case app.ControlsPanel.WindSpeedSlider
                    NewValue = get(Sender, 'Value');
                    app.DisplayObject.AverageWindSpeed = NewValue;
                case app.ControlsPanel.WindSpeedNumber
                    NewValue = get(Sender, 'String');
                    NewValue = ReadStringValue(NewValue);
                    if isfinite(NewValue)
                        % Round to 2 decimal places.
                        NewValue = round(NewValue*100)/100;
                        app.DisplayObject.AverageWindSpeed = NewValue;
                    else
                        msgbox(sprintf(' Wind speed ''%s'' isn''t understood.', get(Sender, 'String')))
                        app.SetValues
                    end
                case app.RoadConcPanel.Mode        
                    NewValue = get(Sender, 'Value');
                    NewValue = app.CalcDistMeasuredFromText{NewValue};
                    app.DisplayObject.CalculationDistanceMode = NewValue;
                case app.ChemPanels.PM10Panel.BGEdit
                    NewValue = str2double(get(Sender, 'String'));
                    app.DisplayObject.BackgroundPM10 = NewValue;
                case app.ChemPanels.PM25Panel.BGEdit
                    NewValue = str2double(get(Sender, 'String'));
                    app.DisplayObject.BackgroundPM25 = NewValue;
                case app.ChemPanels.NOxPanel.BGEdit
                    NewValue = str2double(get(Sender, 'String'));
                    app.DisplayObject.BackgroundNOx = NewValue;
                case app.ChemPanels.NO2Panel.BGEdit
                    NewValue = str2double(get(Sender, 'String'));
                    app.DisplayObject.BackgroundNO2 = NewValue;
                case app.ChemPanels.O3Panel.BGEdit
                    NewValue = str2double(get(Sender, 'String'));
                    app.DisplayObject.BackgroundO3 = NewValue;
                case app.ChemPanels.PM10Panel.AQEdit
                    NewValue = str2double(get(Sender, 'String'));
                    app.DisplayObject.SetLimit('PM10', NewValue);
                case app.ChemPanels.PM25Panel.AQEdit
                    NewValue = str2double(get(Sender, 'String'));
                    app.DisplayObject.SetLimit('PM25', NewValue);
                case app.ChemPanels.NO2Panel.AQEdit
                    NewValue = str2double(get(Sender, 'String'));
                    app.DisplayObject.SetLimit('NO2', NewValue);
                case app.ChemPanels.NOxPanel.AQEdit
                    NewValue = str2double(get(Sender, 'String'));
                    app.DisplayObject.SetLimit('NOx', NewValue);
                case app.ControlsPanel.PollutantDropDown
                    NewValue = get(Sender, 'Value');
                    NewValue = app.Pollutants{NewValue};
                    app.DisplayObject.Pollutant = NewValue;
                case app.ControlsPanel.EmissionDropDown
                    NewValue = get(Sender, 'Value');
                    NewValue = app.EmissionFactors{NewValue};
                    app.DisplayObject.EmissionFactorClassName = NewValue;
                case app.VisPanel.DisplayModelledCB
                    NewValue = get(Sender, 'Value');
                    app.DisplayObject.DisplayModelledPointConcentrations = NewValue;
                case app.VisPanel.DisplayRoadCB
                    NewValue = get(Sender, 'Value');
                    app.DisplayObject.DisplayRoad = NewValue;
                case app.VisPanel.DisplayBackgroundMapCB
                    NewValue = get(Sender, 'Value');
                    app.DisplayObject.DisplayBackgroundMap = NewValue;
                case app.VisPanel.DisplayGridCB
                    NewValue = get(Sender, 'Value');
                    app.DisplayObject.DisplayGrid = NewValue;
                case app.VisPanel.RoadConcentrationDropDown
                    NewValue = get(Sender, 'Value');
                    NewValue = app.ColorModesB{NewValue};
                    app.DisplayObject.RoadColorMode = NewValue;
                case app.VisPanel.ClearSelect
                    app.DisplayObject.ClearSelection
                case app.VisPanel.ColorSelect
                    C = uisetcolor(app.DisplayObject.BackgroundColor);
                    app.DisplayObject.BackgroundColor = C;
                case app.VisPanel.SelectBG
                    switch get(Sender, 'SelectedObject')
                        case app.VisPanel.SelectButton1
                            app.DisplayObject.RoadSelectionMode = 'Create';
                        case app.VisPanel.SelectButton2
                            app.DisplayObject.RoadSelectionMode = 'Append';
                        otherwise
                            error('Euuu?')
                    end  
                otherwise
                    set(app.Figure, 'pointer', 'arrow')
                    error('SRM1:SettingsDialogue:ChangeValues:UnknownSender', 'Sender is not recognised.')
            end
            set(app.Figure, 'pointer', 'arrow')
        end % function ChangeValues(app, Sender, ~)
        
        function RaiseEmissionEdit(app, ~, ~)
            
            if ~isempty(app.EmissionAttributionWindow) && ishghandle(app.EmissionAttributionWindow.Figure)
                app.EmissionAttributionWindow.EmissionFactorName = app.Emission;
                figure(app.EmissionAttributionWindow.Figure)
            else            
                app.EmissionAttributionWindow = SRM1.EmissionFactorAttributionDialogue('ModelObject', app.DisplayObject.Model, ...
                    'EmissionFactorName', app.Emission, ...
                    'Position', app.EmissionAttributionWindowPosition);%, ...
                    %'SettingsDialogueObject', app);
            end
        end % function RaiseEmissionEdit(app, ~, ~)
        
        function CloseFunction(app, ~, ~)
            PPP = get(app.Figure, 'Position');
            app.DisplayObject.SettingsDialogueWindowPosition = [PPP(1), PPP(2)];
            
            % Close the Emission Attribution Window, if it exists.
            try
                app.EmissionAttributionWindow.CloseFunction()
            catch err
                if ~ismember(err.identifier, 'MATLAB:nonStrucReference')
                    disp(err)
                    rethrow(err)
                end
            end
            % Delete the figure. 
            delete(app.Figure)
        end % function CloseFunction(app)
    end % methods
    
end % classdef SettingsDialogue < handle

